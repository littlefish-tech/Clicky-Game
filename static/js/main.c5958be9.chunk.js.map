{"version":3,"sources":["components/Wrapper/index.js","components/IconCard/index.js","components/TopScore/index.js","components/Title/index.js","components/Score/index.js","components/Alert/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","IconCard","alt","name","src","image","id","onClick","handleClick","TopScore","Title","Score","Alert","App","state","icons","topScore","alert","score","iconArray","historyArray","isGameOver","arrayShuffle","newPos","temp","i","length","Math","floor","random","setState","includes","topScoreHandler","this","map","icon","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ojEAOeA,MAJf,SAAiBC,GACb,OAAO,yBAAKC,UAAY,WAAWD,EAAME,WCQ9BC,G,MARE,SAACH,GAChB,OACE,yBAAKC,UAAU,QACX,yBAAKG,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,MAAOC,GAAIR,EAAMQ,GAAIC,QAAS,kBAAMT,EAAMU,YAAYV,EAAMQ,KAAKP,UAAU,sBCCnGU,G,MAJA,SAAAX,GACjB,OAAO,yBAAKC,UAAY,YAAW,gCAASD,EAAME,a,MCEnCU,MAJf,SAAeZ,GACb,OAAO,yBAAKC,UAAU,SAAQ,gCAASD,EAAME,YCGhCW,G,MAJD,SAAAb,GACZ,OAAO,yBAAKC,UAAU,SAAQ,gCAASD,EAAME,aCGhCY,G,MAHD,SAAAd,GACd,OAAO,yBAAKC,UAAY,SAASD,EAAME,YCkHxBa,E,2MAtGbC,MAAQ,CACNC,QACAC,SAAU,EACVC,MAAO,2BACPC,MAAO,EACPC,UAAW,GACXC,aAAc,GACdC,YAAY,G,EAKhBC,aAAe,WAMf,IAJA,IAAIC,EACJC,EAGSC,EAAI,EAAKX,MAAMC,MAAMW,OAAS,EAAGD,EAAI,EAAGA,IAC/CF,EAASI,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACzCD,EAAO,EAAKV,MAAMC,MAAMU,GACxB,EAAKX,MAAMC,MAAMU,GAAK,EAAKX,MAAMC,MAAMQ,GACvC,EAAKT,MAAMC,MAAMQ,GAAUC,EAE7B,EAAKM,SAAS,CAACf,MAAOA,K,EAGtBP,YAAc,SAAAF,GAER,EAAKQ,MAAMM,aAAaW,SAASzB,IACnC,EAAKwB,SAAS,CAACT,YAAY,IAC3B,EAAKW,kBACL,EAAKF,SAAS,CAACZ,MAAO,IACtB,EAAKY,SAAS,CAACb,MAAO,uDAEtB,EAAKa,SAAS,CAACV,aAAa,GAAD,mBAAM,EAAKN,MAAMM,cAAjB,CAA+Bd,MAC1D,EAAKgB,eAEL,EAAKQ,SAAS,CAACZ,MAAO,EAAKJ,MAAMI,MAAM,M,EAKzCc,gBAAkB,WACZ,EAAKlB,MAAMI,MAAQ,EAAKJ,MAAME,SAChC,EAAKc,SAAS,CAACd,SAAU,EAAKF,MAAMI,QAEpC,EAAKY,SAAS,CAACd,SAAU,EAAKF,MAAME,Y,wEA+BjC,IAAD,OACJ,OAEE,kBAAC,EAAD,KACG,kBAAC,EAAD,oBAEC,kBAAC,EAAD,eAAeiB,KAAKnB,MAAMI,OAC1B,kBAAC,EAAD,mBAAsBe,KAAKnB,MAAME,UACjC,kBAAC,EAAD,KAAQiB,KAAKnB,MAAMG,OAElBgB,KAAKnB,MAAMC,MAAMmB,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACA3B,YAAa,EAAKA,YAChBF,GAAI6B,EAAK7B,GACT8B,IAAKD,EAAK9B,MACVA,MAAO8B,EAAK9B,gB,GA/FRgC,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5958be9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props){\n    return <div className = \"Wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\n\nconst IconCard = (props)=> {\n  return (\n    <div className=\"card\">\n        <img alt={props.name} src={props.image} id={props.id} onClick={() => props.handleClick(props.id)} className=\"clickIconImage\"/>\n    </div>\n  );\n}\n\nexport default IconCard;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nconst TopScore = props => {\nreturn <div className = \"topScore\"><strong>{props.children}</strong></div>\n};\n\n  export default TopScore;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <div className=\"title\"><strong>{props.children}</strong></div>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Score = props => {\n  return <div className=\"score\"><strong>{props.children}</strong></div>;\n}\n\nexport default Score;\n","\nimport React from \"react\";\nimport \"./style.css\";\n\nconst Alert = props =>{\nreturn <div className = \"alert\">{props.children}</div>\n}\nexport default Alert;","import React, { Component } from 'react';\nimport './App.css';\nimport icons from \"./icons.json\";\n// import { render } from '@testing-library/react';\n\nimport Wrapper from \"./components/Wrapper\";\nimport IconCard from \"./components/IconCard\";\nimport TopScore from \"./components/TopScore\";\nimport Title from './components/Title';\nimport Score from \"./components/Score\";\nimport Alert from './components/Alert';\n// import Alert from \"./components/Alert\";\n\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    icons,\n    topScore: 0,\n    alert: \"Click Any Image to Start\",\n    score: 0,\n    iconArray: [],\n    historyArray: [],\n    isGameOver: false\n  };\n\n  \n\narrayShuffle = () => {\n  // console.log(this)\nlet newPos,\ntemp\n;\n\nfor (let i = this.state.icons.length - 1; i > 0; i--) {\n  newPos = Math.floor(Math.random() * (i + 1));\n  temp = this.state.icons[i];\n  this.state.icons[i] = this.state.icons[newPos];\n  this.state.icons[newPos] = temp;\n}\nthis.setState({icons: icons})\n} \n\nhandleClick = id =>{\n\n  if (this.state.historyArray.includes(id)){\n    this.setState({isGameOver: true})\n    this.topScoreHandler()\n    this.setState({score: 0})\n    this.setState({alert: \"You have already clicked this Image, start again\"})\n  } else {\n    this.setState({historyArray: [...this.state.historyArray, id]})\n    this.arrayShuffle()\n    // console.log(this.state.historyArray)\n    this.setState({score: this.state.score+1})\n    // console.log(this.state.score)\n  }  \n  }\n\n  topScoreHandler = () => {\n    if (this.state.score > this.state.topScore){\n      this.setState({topScore: this.state.score})\n    } else {\n      this.setState({topScore: this.state.topScore})\n    }\n  }\n \n  \n\n  \n\n// if(this.state.isGameOver){\n//   return(\n//     <h1>You lost!!</h1>\n//   )} else {\n//     return (\n\n//         <Wrapper>\n//             <Title>Clicky Name</Title>\n          \n//             <Score>Score: {this.state.score}</Score>\n//             <TopScore>Top Score: {this.state.topScore}</TopScore>\n//             {this.state.icons.map(icon => (\n//               <IconCard\n//               handleClick={this.handleClick}\n//                 id={icon.id}\n//                 key={icon.image}\n//                 image={icon.image}\n//               />\n//             ))}\n//           </Wrapper>\n        \n//       );\n//   }\nrender(){\n    return (\n\n      <Wrapper>\n         <Title>Clicky Name</Title>\n          \n          <Score>Score: {this.state.score}</Score>\n          <TopScore>Top Score: {this.state.topScore}</TopScore>\n          <Alert>{this.state.alert}</Alert>\n          \n          {this.state.icons.map(icon => (\n            <IconCard\n            handleClick={this.handleClick}\n              id={icon.id}\n              key={icon.image}\n              image={icon.image}\n            />\n          ))}\n        </Wrapper>\n      \n    );\n    \n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}